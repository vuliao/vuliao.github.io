{"meta":{"title":"donnic","subtitle":null,"description":null,"author":"donnic","url":"http://blog.dotnic.top"},"pages":[{"title":"","date":"2017-11-23T22:48:29.793Z","updated":"2017-11-23T22:48:29.793Z","comments":true,"path":"drag/index.html","permalink":"http://blog.dotnic.top/drag/index.html","excerpt":"","text":"多媒体播放器 html, body { height: 100%; } .drop-view { position: fixed; z-index: 100; display: none; background: rgba(0, 0, 255, 0.37); } .img-brower { width: 100%; min-height: 100%; display: none; text-align: center; background: #f1f1f1; } .img-content { margin: 20px auto; display: inline-block; max-width: 95%; min-width: 700px; } .img-content img { max-width: 100%; display: block; margin: 10px auto; border: 1px solid #c0c0c0; } .video-box { display: block; width: 100%; background: #a5a3a3; } .video { width: 100%; height: 100%; } .msg { position: absolute; top: 5px; left: 5px; display: none; z-index: 1001; } 出错 1"},{"title":"","date":"2017-11-10T10:39:21.259Z","updated":"2017-11-10T10:39:21.170Z","comments":true,"path":"drag/css/reset.css","permalink":"http://blog.dotnic.top/drag/css/reset.css","excerpt":"","text":"/* CSS Document */ body,ul,ol,li,p,h1,h2,h3,h4,h5,h6,form,fieldset,table,td,img,div,dl,dt,dd,input{margin: 0;padding: 0;} body{font-size: 12px;} img{border: none;} li{list-style: none;} input,select,textarea{outline:none;} textarea{resize:none;} a{text-decoration: none;}"},{"title":"","date":"2017-11-10T18:39:58.299Z","updated":"2017-11-10T18:39:58.257Z","comments":true,"path":"drag/js/dropView.js","permalink":"http://blog.dotnic.top/drag/js/dropView.js","excerpt":"","text":"var dropViewHandle = (function(){ \"use strict\"; function filesObj(name){ this.name = name||null; this.dirsArr = []; this.filesArr = []; this.objParent = null; } filesObj.prototype.addFile = function(file){ this.filesArr.push(file); }; filesObj.prototype.addDir = function(name){ var dirObj = new filesObj(name); dirObj.objParent = this; this.dirsArr.push(dirObj); return dirObj; }; filesObj.prototype.getArryByFileType = function(type){ var filesArr = this.filesArr; var dirsArr = this.dirsArr; var fileArry = []; if( filesArr.length > 0) { filesArr.forEach(function(file){ if(file.type.indexOf(type)!==-1){ fileArry.push(file); } }) } if(dirsArr.length > 0){ dirsArr.forEach(function(dirObj){ var temArr = dirObj.getArryByFileType(type); if(temArr.length>0){ fileArry = fileArry.concat(temArr); } }); } return fileArry; }; function dropViewHandle(ele, callback) { ele.ondragover = function(e) { e.preventDefault(); }; ele.ondrop = function(e) { e.preventDefault(); getfiles(e.dataTransfer,function(filesObj) { callback(filesObj); }); }; }//dropViewHandle function getfiles(dataTransfer,callback) { var files = dataTransfer.files; var items = dataTransfer.items; var isLocal = window.location.protocol === \"file:\"; var topfilesObj = new filesObj(); var promiseArr = [Promise.resolve()]; for (var i = 0; i < files.length; i++) { if(!isDir(files[i]) ) { topfilesObj.addFile(files[i]); } else { if(isLocal) { continue; }else { var entry = items[i].webkitGetAsEntry(); promiseArr.push(scanDir(entry,topfilesObj) ); } } } Promise.all(promiseArr).then(function(){ topfilesObj.filesArr.sort(sortFunction); topfilesObj.dirsArr.sort(sortFunction); callback(topfilesObj); }); function scanDir(entry,dirObj){ var scanPromise; if(entry.isDirectory){ var newDirObj = dirObj.addDir(entry.name); var dirReader = entry.createReader(); var _entries = []; scanPromise = new Promise(function(resolve,reject){ readEntries(function(err){ if(err) { console.log(err); resolve(); } var promiseArr = []; _entries.sort(sortFunction); _entries.forEach(function(entry){ promiseArr.push(scanDir(entry,newDirObj) ); }); Promise.all(promiseArr).then(function(){ resolve(); }) }); })//scanPromise } else { scanPromise = new Promise(function(resolve,reject){ entry.file(function(file){ dirObj.addFile(file); resolve(); }) }); } return scanPromise; function readEntries (callback) { dirReader.readEntries(function(entries) { if (entries.length > 0) { _entries = _entries.concat(toArray(entries)); readEntries(callback); } else { callback(); } }, callback); // dirReader.readEntries }; //readEntries }//scanDir function isDir(item) { if(item instanceof File){ if(item.type === \"\") return true; } }//isDir }//getfiles return dropViewHandle; function toArray(list) { return Array.prototype.slice.call(list || [], 0); } function sortFunction(name1, name2) { //sort var a = name1.name.match(/.*\\.?(?=\\w*$)/)[0]; var b = name2.name.match(/.*\\.?(?=\\w*$)/)[0]; var compare = a.length - b.length; var stringLength; if (compare < 0) { stringLength = a.length; } else { stringLength = b.length; } var store = 0; for (var i = 0; i < stringLength; i++) { if (a[i] == b[i]) { if (/\\d/.test(a[i])) { store++; } else { store = 0; } continue; } if (/\\d/.test(a[i])) { if (/\\d/.test(b[i])) { var sliceLengthA = a.slice(i).search(/\\D/) + i; var sliceLengthB = b.slice(i).search(/\\D/) + i; var numSliceA = a.slice(i - store, sliceLengthA); var numSliceB = b.slice(i - store, sliceLengthB); var test = parseInt(numSliceA) - parseInt(numSliceB); return test; } else { return store == 0 ? -1 : 1; } } else { if (/\\d/.test(b[i])) { return store != 0 ? -1 : 1; } else { if (i == stringLength - 1) { return compare; } return a[i] < b[i] ? -1 : 1; } } }; return compare; } //end sortFunction })();"},{"title":"","date":"2017-11-29T18:15:57.180Z","updated":"2017-11-29T18:15:57.180Z","comments":true,"path":"drag/js/main.js","permalink":"http://blog.dotnic.top/drag/js/main.js","excerpt":"","text":"window.onload = function () { //获取屏幕宽度并动态赋值 var winWidth = 0; var winHeight = 0; window.DOM = { title: document.getElementsByTagName(\"title\")[0], body: document.getElementsByTagName(\"body\")[0], dropView: document.getElementById(\"drop_view\"), imgBrower: document.getElementById(\"img_brower\"), imgContent: document.getElementById(\"img_content\"), videoBox: document.getElementById(\"video_box\"), video: document.getElementById(\"video\"), msg: document.getElementById(\"msg\") } function main() { findDimensions(); dropViewStyle(); videoStyle(); enventHandle(); dropViewHandle(DOM.dropView, processfileObj); } function processfileObj(filesObj) { var videoArr = filesObj.getArryByFileType(\"video\"); var imgArr = filesObj.getArryByFileType(\"image\"); if (imgArr.length > 0) { DOM.imgBrower.style.display = \"block\"; DOM.videoBox.style.display = \"none\"; if (!DOM.video.paused) { DOM.video.pause(); } DOM.imgContent.innerHTML = \"\"; DOM.title.innerHTML = \"imageBrower\"; scrollTopTo(0); appendImgs(imgArr); } else if (videoArr.length > 0) { DOM.imgBrower.style.display = \"none\"; DOM.videoBox.style.display = \"block\"; videoSet(videoArr[0]); } } //processfileObj function appendImgs(imgArr) { // console.log(imgArr) var spanNum = 20; var listFragment = document.createDocumentFragment(); var imgTmpArr = imgArr.slice(0, spanNum); imgArr = imgArr.slice(spanNum); var promiseArr = []; imgTmpArr.forEach(function (item) { promiseArr.push(addimgDom(item, listFragment)); }); DOM.imgContent.appendChild(listFragment); return Promise.all(promiseArr).then(function () { if (imgArr.length === 0) return; return appendImgs(imgArr); }) function addimgDom(file, fragment) { if (file.size < 20000) { return Promise.resolve(); } var imgDom = document.createElement(\"img\"); return new Promise(function (resolve, reject) { imgDom.src = URL.createObjectURL(file); imgDom.title = file.name; fragment.appendChild(imgDom); imgDom.onload = function () { if (this.height < 120) { this.parentNode.removeChild(this); }; URL.revokeObjectURL(this.src); resolve(); }; imgDom.onerror = function () { this.parentNode.removeChild(this); URL.revokeObjectURL(this.src); resolve(); } }) } } //appendImgs function videoSet(videofile) { var video = DOM.video; video.src = URL.createObjectURL(videofile); DOM.title.innerHTML = videofile.name; var singleClickTimeFlag = 0; } function setVideoSpeed(forward) { var video = DOM.video; var videoSpeed = video.playbackRate; if (forward == 1) { videoSpeed += 0.2; } else { videoSpeed -= 0.2; } videoSpeed = Math.round(videoSpeed * 10) / 10; video.playbackRate = videoSpeed; showSpeedMsg(video.playbackRate); } function showSpeedMsg(num) { var msg = DOM.msg; msg.innerHTML = num || 1; msg.style.display = \"inline\"; setTimeout(() => { msg.style.display = \"none\"; }, 2000); } function findDimensions() { //函数：获取尺寸 //通过深入Document内部对body进行检测，获取窗口大小 if (document.documentElement && document.documentElement.clientHeight && document.documentElement.clientWidth) { winHeight = document.documentElement.clientHeight; winWidth = document.documentElement.clientWidth; return; } if (window.innerWidth) //获取窗口宽度 winWidth = window.innerWidth; else if ((document.body) && (document.body.clientWidth)) winWidth = document.body.clientWidth; //获取窗口高度 if (window.innerHeight) winHeight = window.innerHeight; else if ((document.body) && (document.body.clientHeight)) winHeight = document.body.clientHeight; } //findDimensions function scrollTopTo(height) { if (document.documentElement.scrollTop == undefined) { document.body.scrollTop = height; } else { document.documentElement.scrollTop = height; } } //scrollTopTo function videoStyle() { DOM.videoBox.style.height = winHeight + \"px\"; } function dropViewStyle() { var viewHeight = winHeight * 3 / 5; var viewWidth = winWidth * 4 / 5; DOM.dropView.style.height = viewHeight + \"px\"; DOM.dropView.style.width = viewWidth + \"px\"; DOM.dropView.style.left = winWidth / 10 + \"px\"; DOM.dropView.style.top = winHeight / 5 + \"px\"; } function enventHandle() { window.onresize = function () { findDimensions(); dropViewStyle(); videoStyle(); }; DOM.video.onclick = function () { if (video.paused) { video.play(); } else { video.pause(); } if (isDbClick(this)) { if (screenfull.enabled) { screenfull.toggle(video); } } } //video.onclick document.onkeydown = function (e) { var video = DOM.video; var currentTime = video.currentTime; e = e || window.event; var duration = video.duration; var ctrlKey = e.ctrlKey || e.metaKey; switch (e.keyCode) { case 37: if (currentTime > 5 && ctrlKey != true) video.currentTime = currentTime - 5; if (ctrlKey == true) setVideoSpeed(-1); break; case 39: if (currentTime + 5 < duration && ctrlKey != true) video.currentTime = currentTime + 5; if (ctrlKey == true) setVideoSpeed(1); break; case 32: //空格 if (video.paused) { video.play(); } else { video.pause(); } } } DOM.imgContent.onclick = function (e) { if (!isDbClick(this)) return; var img = e.target; if (screenfull.enabled) { screenfull.toggle(img); } } DOM.body.ondragover = function (e) { e.preventDefault(); // e.dataTransfer.setData(\"drag\",\"hello\"); DOM.dropView.style.display = \"block\"; } DOM.body.ondrop = function (e) { e.preventDefault(); DOM.dropView.style.display = \"none\"; } } function isDbClick(ele) { \"use strict\" if (ele.isDbClick_dbFlag === 1) { clearTimeout(ele.isDbClick_timeFlag); ele.isDbClick_dbFlag = 0; return true; } else { ele.isDbClick_dbFlag = 1; ele.isDbClick_timeFlag = setTimeout(function () { ele.isDbClick_dbFlag = 0; }, 250); } return false; } main(); } //onload"},{"title":"","date":"2017-11-11T21:15:21.211Z","updated":"2017-11-11T21:14:55.927Z","comments":true,"path":"drag/js/screenfull.min.js","permalink":"http://blog.dotnic.top/drag/js/screenfull.min.js","excerpt":"","text":"/*! * screenfull * v3.3.2 - 2017-10-27 * (c) Sindre Sorhus; MIT License */ !function(){\"use strict\";var a=\"undefined\"!=typeof window&&void 0!==window.document?window.document:{},b=\"undefined\"!=typeof module&&module.exports,c=\"undefined\"!=typeof Element&&\"ALLOW_KEYBOARD_INPUT\"in Element,d=function(){for(var b,c=[[\"requestFullscreen\",\"exitFullscreen\",\"fullscreenElement\",\"fullscreenEnabled\",\"fullscreenchange\",\"fullscreenerror\"],[\"webkitRequestFullscreen\",\"webkitExitFullscreen\",\"webkitFullscreenElement\",\"webkitFullscreenEnabled\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"webkitRequestFullScreen\",\"webkitCancelFullScreen\",\"webkitCurrentFullScreenElement\",\"webkitCancelFullScreen\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"mozRequestFullScreen\",\"mozCancelFullScreen\",\"mozFullScreenElement\",\"mozFullScreenEnabled\",\"mozfullscreenchange\",\"mozfullscreenerror\"],[\"msRequestFullscreen\",\"msExitFullscreen\",\"msFullscreenElement\",\"msFullscreenEnabled\",\"MSFullscreenChange\",\"MSFullscreenError\"]],d=0,e=c.length,f={};d"}],"posts":[{"title":"人类的未来","slug":"future","date":"2017-05-27T11:41:58.000Z","updated":"2017-08-18T06:23:45.617Z","comments":true,"path":"2017/05/27/future/","link":"","permalink":"http://blog.dotnic.top/2017/05/27/future/","excerpt":"","text":"","categories":[{"name":"diary","slug":"diary","permalink":"http://blog.dotnic.top/categories/diary/"}],"tags":[]},{"title":"博客建立流程","slug":"hello-my-blog","date":"2017-05-16T11:34:08.000Z","updated":"2017-11-29T18:45:11.083Z","comments":true,"path":"2017/05/16/hello-my-blog/","link":"","permalink":"http://blog.dotnic.top/2017/05/16/hello-my-blog/","excerpt":"列举了如下 技能点 node.js git gitHub github pages hexo markdown","text":"列举了如下 技能点 node.js git gitHub github pages hexo markdown 个人域名 七牛云 第三方评论平台 第三方统计平台 分割线之前的 是搭建个人免费博客所必备的之后的 是对个人博客的完善 是accessory 然后是两个chrome插件介绍 极简图床 markdown reader 分别可以简化上传七牛云图片的步骤 和 方便markdown 的编写 搭建过程有感相信任何一个零基础的人也能按照上面的名词百度出相关教程和文档 独立实现。但因为对未知的恐慌 对于零基础的新手来说这其间消耗的时间可能会很长所以我并不认为 网上那些零基础教你七八个小时搭建hexo博客的教程 真的能让你在指定时间内实现你想要的。 下面是借鉴的一些hexo搭建教程 链接 参考 使用Hexo搭建个人博客(基于hexo3.0) 从零开始定制hexo主题 说明不少教程都有些过时，上面的hexo3.0的教程 还算可以主题定制虽然是零基础 但教你做主题的文章并不多","categories":[{"name":"hexo","slug":"hexo","permalink":"http://blog.dotnic.top/categories/hexo/"}],"tags":[]}]}